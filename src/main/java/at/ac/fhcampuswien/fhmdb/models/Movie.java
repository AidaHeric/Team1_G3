package at.ac.fhcampuswien.fhmdb.models;

import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

public class Movie implements Comparable<Movie>{
    private String title;                   //Mithilfe von Swagger
    private String description;
    private List<String> genres;            //TODO: Enum array/list
    private String id;
    private int releaseYear;
    private String imgUrl;
    private int lengthInMinutes;
    private List<String> directors;
    private List<String> mainCast;
    private double rating;

    public Movie(String title, String description, List<String> genres) {
        this.title = title;
        this.description = description;
        this.genres = genres;
    }

    public Movie(String id, String title, String description, List<String> genres, int releaseYear, int lengthInMinutes, String imgUrl, List<String> directors, List<String> mainCast, double rating){
        this.id = id;
        this.title = title;
        this.description = description;
        this.genres = genres;
        this.releaseYear = releaseYear;
        this.lengthInMinutes = lengthInMinutes;
        this.imgUrl = imgUrl;
        this.directors = directors;
        this.mainCast = mainCast;
        this.rating = rating;
    }

    public static List<String> getAllGenres() {
        return Arrays.asList("ALL","ACTION", "ADVENTURE", "ANIMATION", "BIOGRAPHY", "COMEDY",
                "CRIME", "DRAMA", "DOCUMENTARY", "FAMILY", "FANTASY", "HISTORY", "HORROR",
                "MUSICAL", "MYSTERY", "ROMANCE", "SCIENCE_FICTION", "SPORT", "THRILLER", "WAR",
                "WESTERN");
    }

    //TODO New initalizeMovies with API

    public static List<Movie> initializeMovies(){ //Dummy Movies generated by ChatGPT

        List<Movie> movies = new ArrayList<>();

        Movie theGodfather = new Movie("The Godfather","The Godfather \"Don\" Vito Corleone is the head of the Corleone mafia family in New York. He is at the event of his daughter's wedding. Michael, Vito's youngest son and a decorated WW II Marine is also present at the wedding. Michael seems to be uninterested in being a part of the family business. Vito is a powerful man, and is kind to all those who give him respect but is ruthless against those who do not. But when a powerful and treacherous rival wants to sell drugs and needs the Don's influence for the same, Vito refuses to do it. What follows is a clash between Vito's fading old values and the new ways which may cause Michael to do the thing he was most reluctant in doing and wage a mob war against all the other mafia families which could tear the Corleone family apart.",List.of("ACTION", "DRAMA"));
        Movie inception = new Movie("Inception", "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O., but his tragic past may doom the project and his team to disaster.",List.of("ACTION", "FANTASY"));
        Movie starWars = new Movie("Star Wars: Episode IV - A New Hope", "A farm boy joins a rebel alliance to save the galaxy from an evil empire.", List.of("ACTION", "ADVENTURE", "SCIENCE_FICTION"));
        Movie barbieFairytopia = new Movie("Barbie Fairytopia", "Elina, a flower fairy, embarks on a journey to save her home and friends from the clutches of the evil Laverna, proving that even the smallest wings can make a big difference.", List.of("FAMILY", "FANTASY", "ANIMATION"));
        Movie theMatrix = new Movie("The Matrix", "A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.", List.of("ACTION", "SCIENCE_FICTION"));
        Movie interstellar = new Movie("Interstellar", "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.", List.of("ADVENTURE", "SCIENCE_FICTION", "DRAMA"));
        Movie jurassicPark = new Movie("Jurassic Park", "During a preview tour, a theme park suffers a major power breakdown that allows its cloned dinosaur exhibits to run amok.", List.of("ADVENTURE", "SCIENCE_FICTION"));
        Movie spiritedAway = new Movie("Spirited Away", "During her family's move to the suburbs, a sullen 10-year-old girl wanders into a world ruled by gods, witches, and spirits, and where humans are changed into beasts.", List.of("ANIMATION", "FANTASY"));
        Movie forrestGump = new Movie("Forrest Gump", "The presidencies of Kennedy and Johnson, the Vietnam War, the Watergate scandal and other historical events unfold from the perspective of an Alabama man with an IQ of 75, whose only desire is to be reunited with his childhood sweetheart.", List.of("DRAMA", "ROMANCE"));
        Movie theShawshankRedemption = new Movie("The Shawshank Redemption", "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.", List.of("DRAMA"));
        Movie theDarkKnight = new Movie("The Dark Knight", "When the menace known as the Joker emerges from his mysterious past, he wreaks havoc and chaos on the people of Gotham. The Dark Knight must accept one of the greatest psychological and physical tests of his ability to fight injustice.", List.of("ACTION", "DRAMA"));
        Movie theGrandBudapestHotel = new Movie("The Grand Budapest Hotel", "A writer encounters the owner of an aging high-class hotel, who tells him of his early years serving as a lobby boy in the hotel's glorious years under an exceptional concierge.", List.of("COMEDY", "DRAMA"));

        movies.add(theGodfather);
        movies.add(inception);
        movies.add(starWars);
        movies.add(barbieFairytopia);
        movies.add(theMatrix);
        movies.add(interstellar);
        movies.add(jurassicPark);
        movies.add(spiritedAway);
        movies.add(forrestGump);
        movies.add(theShawshankRedemption);
        movies.add(theDarkKnight);
        movies.add(theGrandBudapestHotel);
        return movies;
    }

    @Override
    public int compareTo(Movie movie) {
        return this.title.compareTo(movie.getTitle());
    }
    public boolean containsString(String substring) { //Checks if the string of title and description contains the given substring
        return String.format("%s %s", title, description).toLowerCase().contains(substring.toLowerCase());
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public List<String> getGenres() {
        return genres;
    }

    public String getId() {
        return id;
    }

    public int getReleaseYear() {
        return releaseYear;
    }

    public String getImgUrl() {
        return imgUrl;
    }

    public int getLengthInMinutes() {
        return lengthInMinutes;
    }

    public List<String> getDirectors() {
        return directors;
    }

    public List<String> getMainCast() {
        return mainCast;
    }

    public double getRating() {
        return rating;
    }
}


